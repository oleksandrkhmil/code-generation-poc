// Code generated by go-swagger; DO NOT EDIT.

package form3

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// RecordType List:
//   - payment - payment
//
// swagger:model RecordType
type RecordType string

func NewRecordType(value RecordType) *RecordType {
	return &value
}

// Pointer returns a pointer to a freshly-allocated RecordType.
func (m RecordType) Pointer() *RecordType {
	return &m
}

const (

	// RecordTypePayment captures enum value "payment"
	RecordTypePayment RecordType = "payment"
)

// for schema
var recordTypeEnum []interface{}

func init() {
	var res []RecordType
	if err := json.Unmarshal([]byte(`["payment"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		recordTypeEnum = append(recordTypeEnum, v)
	}
}

func (m RecordType) validateRecordTypeEnum(path, location string, value RecordType) error {
	if err := validate.EnumCase(path, location, value, recordTypeEnum, true); err != nil {
		return err
	}
	return nil
}

// Validate validates this record type
func (m RecordType) Validate(formats strfmt.Registry) error {
	var res []error

	// value enum
	if err := m.validateRecordTypeEnum("", "body", m); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// ContextValidate validates this record type based on context it is used
func (m RecordType) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
